import defu from 'defu';
import { extname, resolve } from 'node:path';
import { Unimport, createUnimport } from 'unimport';
import { Plugin } from 'vite';
import { isModuleInstalled } from '~/core/utils/package';
import { addViteConfig, defineWxtModule } from '~/modules';
import type {
  EslintGlobalsPropValue,
  Logger,
  ResolvedConfig,
  Wxt,
  WxtDirFileEntry,
  WxtResolvedUnimportOptions,
  WxtUnimportOptions,
} from '~/types';

type UnimportModuleOptions = false | WxtUnimportOptions;

declare module '~/types' {
  export interface InlineConfig {
    imports?: UnimportModuleOptions;
  }
  export interface Wxt {
    unimport: Unimport;
  }
}

export default defineWxtModule<UnimportModuleOptions>({
  name: 'wxt-builtin:unimport',
  configKey: 'imports',
  setup(wxt, _options) {
    if (_options === false) return;

    let unimport: Unimport;
    let options: WxtResolvedUnimportOptions;

    wxt.hooks.hook('ready', async (wxt) => {
      // Initialize unimport instance
      options = await resolveOptions(wxt.config, _options, wxt.logger);
      unimport = createUnimport(options);
      wxt.unimport = unimport;
      await unimport.scanImportsFromDir();

      // Add module imports to config
      wxt.config.modules.forEach((module) => {
        if (!module.imports) return;
        options.imports ??= [];
        options.imports.push(...module.imports);
      });
    });

    // Generate types
    wxt.hooks.hook('prepare:types', async (wxt, entries) => {
      entries.push(await getImportsDeclarationEntry(wxt, unimport));

      if (!options.eslintrc.enabled) return;
      entries.push(await getImportsEslintEntry(unimport, options));
    });

    // Add vite plugin
    addViteConfig(wxt, () => ({
      plugins: [vitePlugin(unimport)],
    }));
  },
});

export async function resolveOptions(
  wxtConfig: ResolvedConfig,
  options: WxtUnimportOptions | undefined,
  logger?: Logger,
): Promise<WxtResolvedUnimportOptions> {
  const _eslintEnabled = options?.eslintrc?.enabled;
  let eslintEnabled: boolean;
  switch (_eslintEnabled) {
    case undefined:
    case 'auto':
      eslintEnabled = await isModuleInstalled('eslint');
      break;
    default:
      eslintEnabled = _eslintEnabled;
  }

  const defaultOptions: WxtResolvedUnimportOptions = {
    debugLog: logger?.debug,
    dirsScanOptions: {
      cwd: wxtConfig.srcDir,
    },
    imports: [
      { name: 'defineConfig', from: 'wxt' },
      { name: 'fakeBrowser', from: 'wxt/testing' },
    ],
    presets: [
      { package: 'wxt/client' },
      { package: 'wxt/browser' },
      { package: 'wxt/sandbox' },
      { package: 'wxt/storage' },
    ],
    warn: logger?.warn,
    dirs: ['components', 'composables', 'hooks', 'utils'],
    eslintrc: {
      enabled: eslintEnabled,
      filePath: resolve(wxtConfig.wxtDir, 'eslintrc-auto-import.json'),
      globalsPropValue: true,
    },
  };

  return defu<WxtResolvedUnimportOptions, [WxtResolvedUnimportOptions]>(
    options ?? {},
    defaultOptions,
  );
}

export function vitePlugin(unimport: Unimport): Plugin {
  const ENABLED_EXTENSIONS = new Set([
    '.js',
    '.jsx',
    '.ts',
    '.tsx',
    '.vue',
    '.svelte',
  ]);
  return {
    name: 'wxt:unimport',
    async transform(code, id) {
      // Don't transform dependencies
      if (id.includes('node_modules')) return;

      // Don't transform non-js files
      if (!ENABLED_EXTENSIONS.has(extname(id))) return;

      const injected = await unimport.injectImports(code, id);
      return {
        code: injected.code,
        map: injected.s.generateMap({ hires: 'boundary', source: id }),
      };
    },
  };
}

async function getImportsDeclarationEntry(
  wxt: Wxt,
  unimport: Unimport,
): Promise<WxtDirFileEntry> {
  // Load project imports into unimport memory so they are output via generateTypeDeclarations
  await unimport.scanImportsFromDir(undefined, { cwd: wxt.config.srcDir });

  return {
    path: 'types/imports.d.ts',
    text: [
      '// Generated by wxt',
      await unimport.generateTypeDeclarations(),
      '',
    ].join('\n'),
    tsReference: true,
  };
}

async function getImportsEslintEntry(
  unimport: Unimport,
  options: WxtResolvedUnimportOptions,
): Promise<WxtDirFileEntry> {
  const globals: Record<string, EslintGlobalsPropValue> = {};
  const eslintrc = { globals };

  (await unimport.getImports())
    .map((i) => i.as ?? i.name)
    .filter(Boolean)
    .sort()
    .forEach((name) => {
      eslintrc.globals[name] = options.eslintrc.globalsPropValue;
    });

  return {
    path: options.eslintrc.filePath,
    text: JSON.stringify(eslintrc, null, 2) + '\n',
  };
}
